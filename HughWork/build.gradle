apply plugin: 'com.android.library'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        vectorDrawables.useSupportLibrary=true
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }

    useLibrary 'org.apache.http.legacy'

    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }

}


dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation files('libs/ksoap2-android-3.0.0.jar')
    testImplementation 'junit:junit:4.12'
    implementation 'com.android.support:appcompat-v7:'+ rootProject.ext.dependencies.support_version
    implementation 'com.android.support:recyclerview-v7:' + rootProject.ext.dependencies.support_version
    implementation 'com.android.support:design:' + rootProject.ext.dependencies.support_version

    implementation 'com.squareup.retrofit2:retrofit:2.0.2'
    implementation 'com.squareup.retrofit2:adapter-rxjava:2.0.0-beta4'
    implementation 'com.squareup.retrofit2:converter-gson:2.0.0-beta4'
    implementation 'com.squareup.okhttp3:okhttp:3.2.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.2.0'
    implementation 'com.google.code.gson:gson:2.5'
    // rxjava
    implementation "io.reactivex.rxjava2:rxjava:2.0.7"
    implementation "io.reactivex.rxjava2:rxandroid:2.0.1"
    //    compile ("com.android.support:appcompat-v7:${project.APPCOMPAT_VERSION}"){
    //        exclude module: 'support-v4'
    //    }
    //    compile "com.android.support:design:${project.DESIGN_SUPPORT_VERSION}"

}



 task clearJar(type: Delete) {
 delete 'build/libs/worksdk.jar'
 }

 task makeJar(type: Copy) {
 from('build/intermediates/bundles/release/')
 into('build/libs/')
 include('classes.jar')
 rename ('classes.jar', 'worksdk.jar')
 }

 makeJar.dependsOn(clearJar,build)


//在终端执行生成JAR包
// gradlew makeJar

/**
 *
 * task deleteOldJar(type: Delete) {
 delete 'build/outputs/work.jar'
 }

 task exportJar(type: Copy) {
 from('build/intermediates/bundles/release/')
 into('build/libs/')
 include('classes.jar')
 rename ('classes.jar', 'work.jar')
 }

 exportJar.dependsOn(deleteOldJar, build)



 //定义一个函数，target是生成jar包的文件名，classDir是class文件所在的文件夹
 def makeworkJar(String target,String classDir){
 exec{
 executable "jar"   //调用jar
 args "cvf",target
 args "-C", classDir
 args "","."
 }
 }

 //新建一个task,名为buildLib,依赖build(build是一个自带的task)
 task buildLib(dependsOn:['build'])<< {
 makeworkJar("work.jar","build/intermediates/classes/release")
 }
 */